var SIZE = 0.0525;
var Z = -0.15;
//reversing X
var x = -3*SIZE;
//var x = 3*SIZE;
var y = -2 *SIZE;

var cleanup = function(x) {
    return  Math.round(x*100000)/100000;
}

console.log('[');
for (let row = 0; row < 4; row++) {
    for (let col = 0; col < 7; col++) {
        //reversing X
        console.log('['+cleanup(x +col*SIZE) + "," + cleanup(y - (3 - row)*SIZE) + ',' + Z  +"],");
        //console.log('['+cleanup(x -col*SIZE) + "," + cleanup(y - (3 - row)*SIZE) + ',' + Z  +"],");
    }
}
console.log(']');

/*Reversing X

[[-0.1575,-0.2625,-0.15],
[-0.105,-0.2625,-0.15],
[-0.0525,-0.2625,-0.15],
[0,-0.2625,-0.15],
[0.0525,-0.2625,-0.15],
[0.105,-0.2625,-0.15],
[0.1575,-0.2625,-0.15],
[-0.1575,-0.21,-0.15],
[-0.105,-0.21,-0.15],
[-0.0525,-0.21,-0.15],
[0,-0.21,-0.15],
[0.0525,-0.21,-0.15],
[0.105,-0.21,-0.15],
[0.1575,-0.21,-0.15],
[-0.1575,-0.1575,-0.15],
[-0.105,-0.1575,-0.15],
[-0.0525,-0.1575,-0.15],
[0,-0.1575,-0.15],
[0.0525,-0.1575,-0.15],
[0.105,-0.1575,-0.15],
[0.1575,-0.1575,-0.15],
[-0.1575,-0.105,-0.15],
[-0.105,-0.105,-0.15],
[-0.0525,-0.105,-0.15],
[0,-0.105,-0.15],
[0.0525,-0.105,-0.15],
[0.105,-0.105,-0.15],
[0.1575,-0.105,-0.15]]
*/


/* Output, opencv coordinates, new proto

[[0.1575,-0.2625,-0.15],
[0.105,-0.2625,-0.15],
[0.0525,-0.2625,-0.15],
[0,-0.2625,-0.15],
[-0.0525,-0.2625,-0.15],
[-0.105,-0.2625,-0.15],
[-0.1575,-0.2625,-0.15],
[0.1575,-0.21,-0.15],
[0.105,-0.21,-0.15],
[0.0525,-0.21,-0.15],
[0,-0.21,-0.15],
[-0.0525,-0.21,-0.15],
[-0.105,-0.21,-0.15],
[-0.1575,-0.21,-0.15],
[0.1575,-0.1575,-0.15],
[0.105,-0.1575,-0.15],
[0.0525,-0.1575,-0.15],
[0,-0.1575,-0.15],
[-0.0525,-0.1575,-0.15],
[-0.105,-0.1575,-0.15],
[-0.1575,-0.1575,-0.15],
[0.1575,-0.105,-0.15],
[0.105,-0.105,-0.15],
[0.0525,-0.105,-0.15],
[0,-0.105,-0.15],
[-0.0525,-0.105,-0.15],
[-0.105,-0.105,-0.15],
[-0.1575,-0.105,-0.15]]

*/
